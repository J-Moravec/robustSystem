% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/robust_system.r
\name{robust_system}
\alias{robust_system}
\title{Catch stderr and stdout from external application}
\usage{
robust_system(command, args = character(), dir = NULL, keep_temp = FALSE,
  stdout_read = list(), stderr_read = list(), ...)
}
\arguments{
\item{command}{external program to run, same as \code{command} in
\code{system2}.}

\item{args}{arguments for external program, same as \code{args} in
\code{system2}.}

\item{dir}{directory that will be used, if not specified, R's temporary
directory is used.}

\item{keep_temp}{if temporary files with \code{stdout} and \code{stderr}
should be kept, if \code{dir} is specified, and was created by this
function, it is deleted as well.}

\item{stdout_read}{parameters to be passed to \code{readLines} function of
\code{stdout}.}

\item{stderr_read}{parameters to be passed to \code{readLines} function of
\code{stderr}}

\item{...}{other parameters passed to \code{system2}.}
}
\value{
list with \code{stdout}, \code{sderr}, exit code and if
\code{keep_temp=TRUE} path to temporary files.
}
\description{
Function \code{robust_system} provide easy way how to catch stdout, stderr and
exit status from external application. It builds on \code{base::system2}
 and utilize it internally. It catch \code{stdout} and \code{stderr} of
command ran by \code{system2} by redirecting them into temporary file and
reading them with \code{readLines}.
}
\details{
Function \code{robust_system} works by redirecting \code{stdout} and
\code{stderr} to temporary files, either in R's temporary directory, which
is deleted after R's session ends, or in user specified directory.

Parameters \code{command} and \code{args} are directly passed to
\code{system2}, as well as any other optional parameters passed as \code{...}.

If \code{keep_temp=FALSE}, temporary files are deleted, but directory is
deleted only if it was created by this function. This makes function clean
after itself, but might be problematic if used in parallel.

With \code{stdout_read} and \code{stderr_read}, you can pass additional
parameters to \code{readLines} function, should as \code{warn=TRUE}, as
\code{readLines} throw warning whenever line doesn't end with a newline.
}

